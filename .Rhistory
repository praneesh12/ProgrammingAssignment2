source('C:/Users/Praneesh/Assignment2/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Praneesh/Assignment2/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Praneesh/Assignment2/ProgrammingAssignment2/cachematrix.R')
setwd("C:/Users/Praneesh/Assignment2/ProgrammingAssignment2/cachematrix.R")
setwd("C:/Users/Praneesh/Assignment2/ProgrammingAssignment2")
getwd
getwd()
source('C:/Users/Praneesh/AppData/Local/Temp/RtmpyaCEEg/boring_function.R')
source('E:/DataScience/my_mean.R')
source('E:/DataScience/my_mean.R')
source('C:/Users/Praneesh/AppData/Local/Temp/RtmpyaCEEg/boring_function.R')
source('C:/Users/Praneesh/Assignment2/ProgrammingAssignment2/cachematrix.R')
my_matrix <- marix(1:6 , 3, 2)
my <- marix(1:6 , 3, 2)
source("ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly.
## Below are a pair of functions that are used to create a special object that
## stores a matrix and caches its inverse.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated
## (and the matrix has not changed), then cacheSolve will retrieve
## the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
getting cached data
my_matrix$getinverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getinverse()
NULL
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$getinverse()
source('C:/Users/Praneesh/Assignment2/ProgrammingAssignment2/cachematrix.R')
View(cacheSolve)
View(cacheSolve)
View(makeCacheMatrix)
